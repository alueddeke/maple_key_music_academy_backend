"""
Django settings for maple_key_backend project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config  # For reading environment variables from .env file

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Using config() to read from .env file for security - never commit secrets to git
# No default value - forces proper .env setup
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG should be False in production for security
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'testserver']


# Application definition

INSTALLED_APPS = [
    'billing',  # Move this to the top - must come before admin
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'rest_framework', 
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders', 
    
    # Django Allauth - Required for OAuth authentication
    'django.contrib.sites',  # Required by django-allauth for multi-site support
    'allauth',  # Main allauth app for authentication
    'allauth.account',  # Handles user accounts and registration
    'allauth.socialaccount',  # Handles social media authentication
    'allauth.socialaccount.providers.google',  # Google OAuth provider
    
    # Custom authentication app
    'custom_auth',  # Your custom auth app for OAuth views and JWT handling
]

MIDDLEWARE = [
	'corsheaders.middleware.CorsMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # Required by django-allauth
]

ROOT_URLCONF = "maple_key_backend.urls"

# Site ID - Required by django-allauth for multi-site support
# This identifies which site in the database this Django instance represents
SITE_ID = 2

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "maple_key_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration - PostgreSQL everywhere
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config('POSTGRES_DB', default='maple_key_dev'),
        "USER": config('POSTGRES_USER', default='maple_key_user'),
        "PASSWORD": config('POSTGRES_PASSWORD', default='maple_key_password'),
        "HOST": config('POSTGRES_HOST', default='db'),
        "PORT": config('POSTGRES_PORT', default='5432'),
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# JWT (JSON Web Token) Settings
# These settings control how JWT tokens are created and validated
from datetime import timedelta

SIMPLE_JWT = {
    # Token lifetime settings
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),  # How long access tokens are valid (60 minutes)
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),     # How long refresh tokens are valid (1 day)
    'ROTATE_REFRESH_TOKENS': False,                  # Whether to create new refresh tokens when used
    'BLACKLIST_AFTER_ROTATION': True,                # Blacklist old tokens after rotation
    'UPDATE_LAST_LOGIN': False,                      # Whether to update user's last login time

    # Token signing settings
    'ALGORITHM': 'HS256',                            # Algorithm used to sign tokens (HMAC with SHA-256)
    'SIGNING_KEY': SECRET_KEY,                       # Key used to sign tokens (your Django secret key)
    'VERIFYING_KEY': None,                           # Key used to verify tokens (None for symmetric algorithms)
    'AUDIENCE': None,                                # Expected audience in token (None for no validation)
    'ISSUER': None,                                  # Expected issuer in token (None for no validation)

    # HTTP header settings
    'AUTH_HEADER_TYPES': ('Bearer',),                # Authorization header type (Bearer token)
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',        # Name of the authorization header
    'USER_ID_FIELD': 'id',                           # Field in user model that contains user ID
    'USER_ID_CLAIM': 'user_id',                      # Claim name for user ID in token

    # Token class settings
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),  # Token classes to use
    'TOKEN_TYPE_CLAIM': 'token_type',                # Claim name for token type

    # JWT ID claim
    'JTI_CLAIM': 'jti',                              # Claim name for JWT ID (unique identifier)
}

# Django Allauth Settings
# These settings configure how django-allauth handles authentication

# Authentication backends - order matters!
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',     # Django's default authentication backend
    'allauth.account.auth_backends.AuthenticationBackend',  # Allauth's authentication backend
]

# Account settings (for allauth.account) - Updated to new format
ACCOUNT_UNIQUE_EMAIL = True                          # Email addresses must be unique
ACCOUNT_EMAIL_VERIFICATION = 'none'                  # Email verification setting ('none', 'optional', 'mandatory')
ACCOUNT_LOGIN_METHODS = {'email'}                    # Use email for authentication instead of username
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']  # Required fields for signup

# Social account settings (for allauth.socialaccount)
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',  # Access to user's basic profile info
            'email',    # Access to user's email address
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',  # Type of access ('online' or 'offline')
        },
        'APP': {
            'client_id': config('GOOGLE_CLIENT_ID'),
            'secret': config('GOOGLE_CLIENT_SECRET'),
            'key': ''
        }
    }
}

# Django Allauth settings
LOGIN_REDIRECT_URL = 'http://localhost:8000/dashboard'  # Your frontend dashboard
SOCIALACCOUNT_LOGIN_ON_GET = True

# CSRF settings
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:5173",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT token authentication
        'rest_framework.authentication.SessionAuthentication',  # Session-based authentication (for admin/built in django auth)
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',  # Require authentication for write operations
    ],
}

# Custom User Model
AUTH_USER_MODEL = 'billing.User'

# Email Configuration
# For testing - emails will be printed to console
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'noreply@maplekey.com'
